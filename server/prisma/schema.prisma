// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    MODEL SECTION STARTS                   |
// |                                                           |
// \___________________________________________________________/

model GlobalContext {
  id               String @id @default(uuid()) @db.Uuid
  rootActionNodeId String @db.Uuid
  rootToolNodeId   String @db.Uuid
  toolGraphId      String @db.Uuid
  actionGraphId    String @db.Uuid
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  clerkId           String             @unique
  stripeId          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  swarms            Swarm[]
  informationGraphs InformationGraph[]

  @@index([clerkId])
}

model Swarm {
  id    String @id @default(uuid()) @db.Uuid
  title String
  goal  String

  agentGraphId String?     @unique @db.Uuid
  agentGraph   AgentGraph? @relation("SwarmToAgentGraph")

  informationGraphId String           @db.Uuid
  informationGraph   InformationGraph @relation("SwarmToInformationGraph", fields: [informationGraphId], references: [id])

  chats  Chat[]
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  viewedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgentGraph {
  id String @id @default(uuid()) @db.Uuid

  nodes AgentNode[]     @relation("AgentGraphToAgentNodes")
  edges AgentEdge[] @relation("AgentGraphToAgentEdges")

  swarm   Swarm  @relation("SwarmToAgentGraph", fields: [swarmId], references: [id])
  swarmId String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InformationGraph {
  id    String @id @default(uuid()) @db.Uuid
  title String

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  swarms Swarm[] @relation("SwarmToInformationGraph")

  nodes InformationNode[]     @relation("InformationGraphToInformationNodes")
  edges InformationEdge[] @relation("InformationGraphToInformationEdges")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActionGraph {
  id String @id @default(uuid()) @db.Uuid

  nodes ActionNode[]     @relation("ActionGraphToActionNodes")
  edges ActionEdge[] @relation("ActionGraphToActionEdges")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToolGraph {
  id String @id @default(uuid()) @db.Uuid

  nodes ToolNode[]     @relation("ToolGraphToToolNodes")
  edges ToolEdge[] @relation("ToolGraphToToolEdges")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id     String         @id @default(uuid()) @db.Uuid
  title  String
  status ChatStatusEnum @default(ACTIVE)

  swarmId String @db.Uuid
  swarm   Swarm  @relation(fields: [swarmId], references: [id])

  messages Message[]

  agentNodeId String    @db.Uuid
  agentNode   AgentNode @relation(fields: [agentNodeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String          @id @default(uuid()) @db.Uuid
  content String
  role    MessageRoleEnum
  chatId  String          @db.Uuid
  chat    Chat            @relation(fields: [chatId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Operation {
  id     String              @id @default(uuid()) @db.Uuid
  status OperationStatusEnum @default(QUEUED)
  type   OperationTypeEnum

  agentNodeId String    @db.Uuid
  agentNode   AgentNode @relation("AgentNodeToOperations", fields: [agentNodeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AgentNode {
  id                   String   @id @default(uuid()) @db.Uuid
  goal                 String
  report               String?
  stringContextHistory String[] @default([])

  status         AgentStatusEnum @default(ACTIVE)
  killPolicyEnum KillPolicyEnum  @default(SIMPLE)
  actionEnum     ActionEnum

  outgoingEdges AgentEdge[] @relation("AgentEdgeStart")
  incomingEdges AgentEdge[] @relation("AgentEdgeEnd")

  operations Operation[] @relation("AgentNodeToOperations")

  chats Chat[]
  logs  String[] @default([])

  agentGraphId String     @db.Uuid
  agentGraph   AgentGraph @relation("AgentGraphToAgentNodes", fields: [agentGraphId], references: [id], onDelete: Cascade)

  planContext        PlanContext?
  routeActionContext RouteActionContext?
  searchContext      SearchContext?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InformationNode {
  id              String              @id @default(uuid()) @db.Uuid
  title           String
  description     String
  informationType InformationTypeEnum

  outgoingEdges InformationEdge[] @relation("InformationEdgeStart")
  incomingEdges InformationEdge[] @relation("InformationEdgeEnd")

  informationGraphId String           @db.Uuid
  informationGraph   InformationGraph @relation("InformationGraphToInformationNodes", fields: [informationGraphId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToolNode {
  id          String       @id @default(uuid()) @db.Uuid
  description String
  toolType    ToolTypeEnum

  outgoingEdges ToolEdge[] @relation("ToolEdgeStart")
  incomingEdges ToolEdge[] @relation("ToolEdgeEnd")

  toolGraphId String    @db.Uuid
  toolGraph   ToolGraph @relation("ToolGraphToToolNodes", fields: [toolGraphId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActionNode {
  id          String     @id @default(uuid()) @db.Uuid
  description String
  actionEnum  ActionEnum

  outgoingEdges ActionEdge[] @relation("ActionEdgeStart")
  incomingEdges ActionEdge[] @relation("ActionEdgeEnd")

  actionGraphId String      @db.Uuid
  actionGraph   ActionGraph @relation("ActionGraphToActionNodes", fields: [actionGraphId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlanContext {
  id                        String    @id @default(uuid()) @db.Uuid
  killFunctionName          String?
  attempts                  Int
  planAttempts              String[]  @default([])
  planReviewFeedbackHistory String[]  @default([])
  agentNode                 AgentNode @relation(fields: [agentNodeId], references: [id])
  agentNodeId               String    @unique @db.Uuid
}

model RouteActionContext {
  id               String    @id @default(uuid()) @db.Uuid
  killFunctionName String?
  content          String
  startNodeId      String?
  currentNodeId    String?
  markedNodeIds    String[]  @default([])
  agentNode        AgentNode @relation(fields: [agentNodeId], references: [id])
  agentNodeId      String    @unique @db.Uuid
}

model SearchContext {
  id                      String    @id @default(uuid()) @db.Uuid
  killHandlerFunctionName String?
  questions               String[]
  agentNode               AgentNode @relation(fields: [agentNodeId], references: [id])
  agentNodeId             String    @unique @db.Uuid
}

model AgentEdge {
  id          String                @id @default(uuid()) @db.Uuid
  startNodeId String                @db.Uuid
  endNodeId   String                @db.Uuid
  type        AgentEdgeTypeEnum

  agentGraphId String     @db.Uuid
  agentGraph   AgentGraph @relation("AgentGraphToAgentEdges", fields: [agentGraphId], references: [id], onDelete: Cascade)

  startNode AgentNode @relation("AgentEdgeStart", fields: [startNodeId], references: [id])
  endNode   AgentNode @relation("AgentEdgeEnd", fields: [endNodeId], references: [id])

  @@unique([startNodeId, endNodeId])
  @@index([startNodeId])
  @@index([endNodeId])
}

model InformationEdge {
  id String @id @default(uuid()) @db.Uuid

  startNodeId String @db.Uuid
  endNodeId   String @db.Uuid

  informationGraphId String           @db.Uuid
  informationGraph   InformationGraph @relation("InformationGraphToInformationEdges", fields: [informationGraphId], references: [id], onDelete: Cascade)

  startNode InformationNode @relation("InformationEdgeStart", fields: [startNodeId], references: [id])
  endNode   InformationNode @relation("InformationEdgeEnd", fields: [endNodeId], references: [id])

  @@unique([startNodeId, endNodeId])
  @@index([startNodeId])
  @@index([endNodeId])
}

model ToolEdge {
  id String @id @default(uuid()) @db.Uuid

  startNodeId String @db.Uuid
  endNodeId   String @db.Uuid

  startNode ToolNode @relation("ToolEdgeStart", fields: [startNodeId], references: [id])
  endNode   ToolNode @relation("ToolEdgeEnd", fields: [endNodeId], references: [id])

  toolGraphId String    @db.Uuid
  toolGraph   ToolGraph @relation("ToolGraphToToolEdges", fields: [toolGraphId], references: [id], onDelete: Cascade)

  @@unique([startNodeId, endNodeId])
  @@index([startNodeId])
  @@index([endNodeId])
}

model ActionEdge {
  id String @id @default(uuid()) @db.Uuid

  startNodeId String @db.Uuid
  endNodeId   String @db.Uuid

  actionGraphId String      @db.Uuid
  actionGraph   ActionGraph @relation("ActionGraphToActionEdges", fields: [actionGraphId], references: [id], onDelete: Cascade)

  startNode ActionNode @relation("ActionEdgeStart", fields: [startNodeId], references: [id])
  endNode   ActionNode @relation("ActionEdgeEnd", fields: [endNodeId], references: [id])

  @@unique([startNodeId, endNodeId])
  @@index([startNodeId])
  @@index([endNodeId])
}

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    MODEL SECTION ENDS                     |
// |                                                           |
// \___________________________________________________________/

// ___________________________________________________________

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    ENUM SECTION STARTS                    |
// |                                                           |
// \___________________________________________________________/

enum OperationStatusEnum {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

enum OperationTypeEnum {
  SPAWN
  RUN
  RETURN
  KILL
}

enum MessageRoleEnum {
  USER
  SYSTEM
  ASSISTANT
}

enum ActionEnum {
  FOLDER
  PLAN
  ROUTE_ACTION
  CODE
  SEARCH
  REVIEW_GOAL_PROGRESS
}

enum AgentStatusEnum {
  ACTIVE
  WAITING_FOR_USER_INPUT
  DEAD
  PAUSED
  ERROR
}

enum KillPolicyEnum {
  SIMPLE
  CONFIRM_DIRECTIVE_COMPLETION
  CUSTOM_KILL_HANDLER
}

enum ToolTypeEnum {
  GITHUB_CLONE
}

enum InformationTypeEnum {
  FOLDER
  GITHUB_REPOSITORY_LINK
  PYTHON_FILE
  TYPESCRIPT_FILE
  STRING
}

enum AgentEdgeTypeEnum {
  SPAWN
  KILL
  RETURN
}

enum ChatStatusEnum {
  ACTIVE
  COMPLETED
}

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    ENUM SECTION ENDS                      |
// |                                                           |
// \___________________________________________________________/
