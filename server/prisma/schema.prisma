// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    MODEL SECTION STARTS                   |
// |                                                           |
// \___________________________________________________________/

model GlobalContext {
  id             String @id @default(uuid()) @db.Uuid
  defaultSwarmId String @db.Uuid
}

model User {
  id        String       @id @default(uuid()) @db.Uuid
  clerkId   String       @unique
  stripeId  String?
  type      UserTypeEnum @default(USER)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  swarms    Swarm[]
  memories  Memory[]

  @@index([clerkId])
}

model Swarm {
  id     String          @id @default(uuid()) @db.Uuid
  goal   String
  title  String
  status SwarmStatusEnum @default(WAITING_FOR_USER_INPUT)

  actionNodes         ActionNode[]         @relation("SwarmToActionNodes")
  actionMetadataNodes ActionMetadataNode[] @relation("SwarmToActionMetadataNodes")
  toolMetadataNodes   ToolMetadataNode[]   @relation("SwarmToToolMetadataNodes")

  memoryId String @db.Uuid
  memory   Memory @relation(fields: [memoryId], references: [id])

  chats Chat[]

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Memory {
  id    String @id @default(uuid()) @db.Uuid
  title String

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  swarms      Swarm[]
  memoryNodes MemoryNode[] @relation("MemoryToMemoryNodes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id     String @id @default(uuid()) @db.Uuid
  title  String

  messages Message[]

  actionNodeId String?     @db.Uuid
  actionNode   ActionNode? @relation(fields: [actionNodeId], references: [id])

  Swarm   Swarm?  @relation(fields: [swarmId], references: [id])
  swarmId String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String          @id @default(uuid()) @db.Uuid
  content String
  role    MessageRoleEnum
  chatId  String          @db.Uuid
  chat    Chat            @relation(fields: [chatId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FunctionCallOperation {
  id             String              @id @default(uuid()) @db.Uuid
  functionToCall String
  actionNodeId   String              @db.Uuid
  actionNode     ActionNode          @relation("ActionNodeToFunctionCallOperations", fields: [actionNodeId], references: [id], onDelete: Cascade)
  status         OperationStatusEnum @default(QUEUED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TerminationOperation {
  id           String              @id @default(uuid()) @db.Uuid
  terminatorId String
  actionNodeId String              @db.Uuid
  actionNode   ActionNode          @relation("ActionNodeToTerminationOperations", fields: [actionNodeId], references: [id], onDelete: Cascade)
  status       OperationStatusEnum @default(QUEUED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockingOperation {
  id                    String                @id @default(uuid()) @db.Uuid
  nextFunctionToCall    String
  args                  Json?
  blockingOperationEnum BlockingOperationEnum
  actionNodeId          String                @db.Uuid
  actionNode            ActionNode            @relation("ActionNodeToBlockingOperations", fields: [actionNodeId], references: [id], onDelete: Cascade)
  status                OperationStatusEnum   @default(QUEUED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActionNode {
  id                     String                  @id @default(uuid()) @db.Uuid
  goal                   String
  status                 ActionStatusEnum        @default(ACTIVE)
  terminationPolicyEnum  TerminationPolicyEnum   @default(SIMPLE)
  report                 String?
  stringContextHistory   String[]                @default([])
  actionEnum             ActionEnum
  parentId               String?                 @default(uuid()) @db.Uuid
  parent                 ActionNode?             @relation("ActionNodeToActionNode", fields: [parentId], references: [id])
  children               ActionNode[]            @relation("ActionNodeToActionNode")
  functionCallOperations FunctionCallOperation[] @relation("ActionNodeToFunctionCallOperations")
  terminationOperations  TerminationOperation[]  @relation("ActionNodeToTerminationOperations")
  blockingOperations     BlockingOperation[]     @relation("ActionNodeToBlockingOperations")
  chats                  Chat[]
  logs                   String[]                @default([])

  swarmId String @db.Uuid
  swarm   Swarm  @relation("SwarmToActionNodes", fields: [swarmId], references: [id], onDelete: Cascade)

  planContext        PlanContext?
  routeActionContext RouteActionContext?
  searchContext      SearchContext?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemoryNode {
  id          String         @id @default(uuid()) @db.Uuid
  title       String
  description String
  memoryType  MemoryTypeEnum
  parentId    String?        @db.Uuid
  parent      MemoryNode?    @relation("MemoryNodeToMemoryNode", fields: [parentId], references: [id])
  children    MemoryNode[]   @relation("MemoryNodeToMemoryNode")

  memoryId String @db.Uuid
  memory   Memory @relation("MemoryToMemoryNodes", fields: [memoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ToolMetadataNode {
  id          String       @id @default(uuid()) @db.Uuid
  description String
  toolType    ToolTypeEnum

  parentId String?            @db.Uuid
  parent   ToolMetadataNode?  @relation("ToolMetadataNodeToToolMetadataNode", fields: [parentId], references: [id])
  children ToolMetadataNode[] @relation("ToolMetadataNodeToToolMetadataNode")

  swarmId String @db.Uuid
  swarm   Swarm  @relation("SwarmToToolMetadataNodes", fields: [swarmId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActionMetadataNode {
  id          String     @id @default(uuid()) @db.Uuid
  description String
  actionEnum  ActionEnum

  parentId String?              @db.Uuid
  parent   ActionMetadataNode?  @relation("ActionMetadataNodeToActionMetadataNode", fields: [parentId], references: [id])
  children ActionMetadataNode[] @relation("ActionMetadataNodeToActionMetadataNode")

  swarmId String @db.Uuid
  swarm   Swarm  @relation("SwarmToActionMetadataNodes", fields: [swarmId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlanContext {
  id                             String     @id @default(uuid()) @db.Uuid
  terminationHandlerFunctionName String?
  attempts                       Int
  planAttempts                   String[]   @default([])
  planReviewFeedbackHistory      String[]   @default([])
  actionNode                     ActionNode @relation(fields: [actionNodeId], references: [id])
  actionNodeId                   String     @unique @db.Uuid
}

model RouteActionContext {
  id                             String     @id @default(uuid()) @db.Uuid
  terminationHandlerFunctionName String?
  content                        String
  startNodeId                    String?
  currentNodeId                  String?
  markedNodeIds                  String[]   @default([])
  actionNode                     ActionNode @relation(fields: [actionNodeId], references: [id])
  actionNodeId                   String     @unique @db.Uuid
}

model SearchContext {
  id                             String     @id @default(uuid()) @db.Uuid
  terminationHandlerFunctionName String?
  questions                      String[]
  actionNode                     ActionNode @relation(fields: [actionNodeId], references: [id])
  actionNodeId                   String     @unique @db.Uuid
}

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    MODEL SECTION ENDS                     |
// |                                                           |
// \___________________________________________________________/

// ___________________________________________________________

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    ENUM SECTION STARTS                    |
// |                                                           |
// \___________________________________________________________/

enum UserTypeEnum {
  ADMIN
  USER
}

enum OperationStatusEnum {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
}

enum MessageRoleEnum {
  USER
  SYSTEM
  ASSISTANT
  SWARMSTAR
}

enum ActionEnum {
  FOLDER
  PLAN
  ROUTE_ACTION
  CODE
  SEARCH
  REVIEW_GOAL_PROGRESS
}

enum ActionStatusEnum {
  ACTIVE
  WAITING_FOR_USER_INPUT
  TERMINATED
  PAUSED
  ERROR
}

enum TerminationPolicyEnum {
  SIMPLE
  CONFIRM_DIRECTIVE_COMPLETION
  CUSTOM_TERMINATION_HANDLER
}

enum BlockingOperationEnum {
  SEND_USER_MESSAGE
  INSTRUCTOR_CALL
  CHATGPT_CALL
}

enum DatabaseTableEnum {
  ACTION_NODES
  SWARMSTAR_SPACE
  SWARMSTAR_EVENTS
  ACTION_METADATA_NODES
  MEMORY_METADATA_NODES
  TOOL_METADATA_NODES
  SPAWN_OPERATIONS
  TERMINATION_OPERATIONS
  BLOCKING_OPERATIONS
  FUNCTION_CALL_OPERATIONS
  MESSAGES
  USERS
}

enum SwarmStatusEnum {
  SPAWNING
  ACTIVE
  WAITING_FOR_USER_INPUT
  COMPLETED
  PAUSED
  ERROR
}

enum ToolTypeEnum {
  GITHUB_CLONE
}

enum MemoryTypeEnum {
  FOLDER
  GITHUB_REPOSITORY_LINK
  PYTHON_FILE
  TYPESCRIPT_FILE
  STRING
}

//  ___________________________________________________________
// /                                                           \
// |                                                           |
// |                    ENUM SECTION ENDS                      |
// |                                                           |
// \___________________________________________________________/
